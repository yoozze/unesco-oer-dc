// # Fluid Ratio Tools
// ===================


// ## Variables
// ------------

/// Defines common aspect ratios.
///
/// @group ratio
/// @access private
/// @type map
$_aspect-ratios: (
    'cinema': 2.39,
    'octave': 2,
    'major-seventh': 15 / 8,
    'widescreen': 'minor-seventh',
    'minor-seventh': 16 / 9,
    'major-sixth': 5 / 3,
    'golden': 1.618,
    'minor-sixth': 8 / 5,
    'photo': 'fifth',
    'fifth': 3 / 2,
    'augmented-fourth': 45 / 32,
    'classic': 'fourth',
    'fourth': 4 / 3,
    'major-third': 5 / 4,
    'minor-third': 6 / 5,
    'major-second': 9 / 8,
    'minor-second': 16 / 15,
    'unison': 1,
);

/// Define your custom aspect ratios.
///
/// @group ratio
/// @access public
/// @type map
$aspect-ratios: () !default;


// ## Functions
// ------------

/// Get named aspect ratio from aspect ratios map.
/// If $ratio is a number, just pass it through.
///
/// @group ratio
/// @access private
/// @param {string | number} $ratio - A ratio or ratio keyword to be resolved.
/// @returns {number} - The ratio associated with a keyword, if available.
@function _get-aspect-ratio($ratio) {
    $options: map-merge($_aspect-ratios, $aspect-ratios);
    $ratio: map-get($options, $ratio) or $ratio;

    // In case `$ratio` is alias, recursively search `$options` map.
    @if map-has-key($options, $ratio) {
        $ratio: _get-aspect-ratio($ratio);
    }

    @return $ratio;
}

/// Return a height based on a given ratio and fluid width.
///
/// @group ratio
/// @access public
/// @param {number | string} $ratio ['widescreen'] - The ratio of width over height,
///     or a ratio keyword.
/// @param {number} $width [100%] - The established fluid width of the element.
/// @returns {number} - A fluid height, based on the width and ratio.
@function fluid-ratio($ratio: 'widescreen', $width: 100%) {
    $ratio: _get-aspect-ratio($ratio);
    @return (1 / $ratio) * $width;
}


// ## Mixins
// ---------

/// Establish a fluid-height container based on an aspect ratio.
///
/// @group ratio
/// @access public
/// @param {number | string} $ratio ['widescreen'] - The ratio of width over height,
///     or a ratio keyword.
/// @param {number} $width [100%] - The established fluid width of the element.
/// @param {string | null} $position [relative] - Establish a positioning context,
///     so children can be stretched to fit.
/// @param {string | null} $important - Indicates if `!important` should be added to every property
///     value.
/// @outputs Fluid-ratio properties.
@mixin fluid-ratio($ratio: 'widescreen', $width: 100%, $position: relative, $important: false) {
    $important: if($important, unquote('!important'), null);

    position: unquote($position) $important;
    width: $width $important;
    height: 0 $important;
    padding-top: fluid-ratio($ratio, $width) $important;
}
