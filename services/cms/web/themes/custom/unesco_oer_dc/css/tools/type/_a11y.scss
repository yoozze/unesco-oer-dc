// # Accessibility Tools
// =====================


// ## Mixins
// ---------

/// Hide an element by positioning it off the page.
///
/// @group a11y
/// @access public
/// @param {bool} $important [false] - Indicates if `!important` should be added to every property
///     value.
/// @outputs Styles for positioning element off page.
@mixin hide-off-page($important: false) {
    $important: if($important, unquote('!important'), null);

    position: absolute $important;
    top: -9999px $important;
    left: -9999px $important;
}

/// Hide an element by clipping it in place.
///
/// @group a11y
/// @access public
/// @param {bool} $important [false] - Indicates if `!important` should be added to every property
///     value.
/// @outputs Styles for clipping element in place.
@mixin hide-visually($important: false) {
    $important: if($important, unquote('!important'), null);

    position: absolute $important;
    width: 1px $important;
    height: 1px $important;
    padding: 0 $important;
    margin: -1px $important;
    overflow: hidden $important;
    clip: rect(0 0 0 0) $important;
    white-space: nowrap $important;
    border: 0 $important;
    clip-path: inset(50%) $important;
}

/// Hide an element by clipping it in place but allowing it to show on focus.
///
/// @group a11y
/// @access public
/// @param {bool} $important [false] - Indicates if `!important` should be added to every property
///     value.
/// @outputs Styles for clipping element in place with pseudo element styles
///     for showing it on focus.
@mixin hide-blurred($important: false) {
    $important: if($important, unquote('!important'), null);

    @include hide-visually($important);

    &:active,
    &:focus {
        position: static $important;
        width: auto $important;
        height: auto $important;
        margin: 0 $important;
        overflow: visible $important;
        clip: auto $important;
        white-space: inherit $important;
        clip-path: none $important;
    }
}
