{#
/**
 * @file
 * Theme override for a form element.
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - errors: (optional) Any errors for this form element, may not be set.
 * - prefix: (optional) The form element prefix, may not be set.
 * - suffix: (optional) The form element suffix, may not be set.
 * - required: The required marker, or empty if the associated form element is
 *   not required.
 * - type: The type of the element.
 * - name: The name of the element.
 * - label: A rendered label element.
 * - label_display: Label display setting. It can have these values:
 *   - before: The label is output before the element. This is the default.
 *     The label includes the #title and the required marker, if #required.
 *   - after: The label is output after the element. For example, this is used
 *     for radio and checkbox #type elements. If the #title is empty but the
 *     field is #required, the label will contain only the required marker.
 *   - invisible: Labels are critical for screen readers to enable them to
 *     properly navigate through forms but can be visually distracting. This
 *     property hides the label for everyone except screen readers.
 *   - attribute: Set the title attribute on the element to create a tooltip but
 *     output no label element. This is supported only for checkboxes and radios
 *     in \Drupal\Core\Render\Element\CompositeFormElementTrait::preRenderCompositeFormElement().
 *     It is used where a visual label is not needed, such as a table of
 *     checkboxes where the row and column provide the context. The tooltip will
 *     include the title and required marker.
 * - description: (optional) A list of description properties containing:
 *    - content: A description of the form element, may not be set.
 *    - attributes: (optional) A list of HTML attributes to apply to the
 *      description content wrapper. Will only be set when description is set.
 * - description_display: Description display setting. It can have these values:
 *   - before: The description is output before the element.
 *   - after: The description is output after the element. This is the default
 *     value.
 *   - invisible: The description is output after the element, hidden visually
 *     but available to screen readers.
 * - disabled: True if the element is disabled.
 * - title_display: Title display setting.
 *
 * @see template_preprocess_form_element()
 */
#}
{% set type_class = type|clean_class|replace({
    'textfield': 'text',
}) %}
{% set name_class = name|clean_class %}
{% set classes = [
    'c-form__field',
    'c-form__field--type_' ~ type_class,
    'c-form__field--name_' ~ name_class,
    title_display not in ['after', 'before'] ? 'c-form__field--no-label',
    disabled == 'disabled' ? 'c-form__field--disabled',
    errors ? 'c-form__field--error',
] %}
{% set control_classes = [
    'c-form__control',
    'c-form__control--type_' ~ type_class,
    'c-form__control--name_' ~ name_class,
    disabled == 'disabled' ? 'c-form__control--disabled',
    errors ? 'c-form__control--error',
] %}
{% set description_classes = [
    'c-form__field-description',
    description_display == 'invisible' ? 'visually-hidden',
]%}
<div{{attributes.addClass(classes)}}>
    <div class="{{ control_classes|join(' ') }}">
        {% if prefix is not empty %}
            <span class="c-form__field-prefix">{{ prefix }}</span>
        {% endif %}
        {% if type == 'item' %}
            <div class="c-form__input" readonly>
                {{ children }}
            </div>
        {% else %}
            {{ children }}
        {% endif %}
        {{ label }}
        {% if suffix is not empty %}
            <span class="c-form__field-suffix">{{ suffix }}</span>
        {% endif %}
    </div>
    {% if errors %}
        <div class="c-form__field-error">
            {{ errors }}
        </div>
    {% endif %}
    {% if description.content %}
        <div{{description.attributes.addClass(description_classes)}}>
            {{ description.content }}
        </div>
    {% endif %}
    {# {{dump()}} #}
</div>
